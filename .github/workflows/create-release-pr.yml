name: Create Release Branch and PR

on:
  workflow_dispatch: # 手動実行のみ

jobs:
  create-release-pr:
    runs-on: ubuntu-latest
    steps:
      # リポジトリをチェックアウト
      - name: Checkout
        uses: actions/checkout@v4

      # Gitユーザー情報を設定（PR作成やブランチ操作用）
      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # 日付情報からリリースブランチ名・PRタイトル用文字列を生成
      - name: Generate branch name
        id: date
        run: |
          echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
          echo "year_month=$(date +'%Y年%m月')" >> $GITHUB_OUTPUT

      # developからリリースブランチを作成してpush
      - name: Create release branch
        run: |
          git fetch origin
          git checkout develop
          git pull
          git checkout -b release/${{ steps.date.outputs.date }}
          git push origin release/${{ steps.date.outputs.date }}

      # GitHub CLIとjqをインストール（PR情報取得用）
      - name: Install GitHub CLI
        run: sudo apt-get install -y gh jq

      - name: Fetch tags
        run: git fetch --tags

      # 前回リリースタグを自動判別
      - name: Get previous release tag
        id: prev_tag
        run: |
          PREV_TAG=$(git tag --sort=-creatordate | grep '^release_' | tail -2 | head -1)
          echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT

      # mainからリリースブランチまでのマージPR一覧を取得
      - name: Collect merged PR list from main to release branch
        id: prs
        run: |
          prs=$(git log --merges --pretty=format:"%s" origin/main..release/${{ steps.date.outputs.date }} | grep -E 'Merge pull request' | sed -E 's/Merge pull request #([0-9]+) from .*/\1/')
          echo "prs<<EOF" >> $GITHUB_OUTPUT
          echo "$prs" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 発行対象プロジェクト一覧を判定し環境変数に格納
      - name: Determine build targets
        id: determine-build
        shell: pwsh
        run: |
          # プロジェクト定義リスト
          $projects = @(
            @{ name = "A.csproj"; path = "src/A"; workflow = "A_stg_publish.yml" },
            @{ name = "B.csproj"; path = "src/B"; workflow = "B_stg_publish.yml" },
            @{ name = "C.csproj"; path = "src/C"; workflow = "C_stg_publish.yml" }
          )
          # developとの差分ファイルから対象プロジェクト抽出
          $changedFiles = git diff --name-only origin/main HEAD
          $targets = @()
          foreach ($project in $projects) {
            if ($changedFiles | Where-Object { $_ -match "$($project.path)/*" }) {
              $targets += $project
            }
          }
          # JSON化して環境変数に格納
          $targetsJson = $targets | ConvertTo-Json -Compress
          "BUILD_TARGETS=$targetsJson" | Out-File -FilePath $env:GITHUB_ENV -Append

      # PR本文生成（対象プロジェクト一覧＋workflow_dispatchボタン）
      - name: Create PR
        shell: pwsh
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          $targets = $env:BUILD_TARGETS | ConvertFrom-Json
          $projectList = ""
          foreach ($t in $targets) {
            $workflowUrl = "https://github.com/${{ github.repository }}/actions/workflows/$($t.workflow)"
            $projectList += "* $($t.name) [実行ボタン]($workflowUrl)`n"
          }
          $title = "${{ steps.date.outputs.year_month }}リリース"
          # PR番号リストからURLリンク付きリストを生成
          $prList = ""
          foreach ($prNum in "${{ steps.prs.outputs.prs }}".Split("`n")) {
            $prUrl = "https://github.com/${{ github.repository }}/pull/$prNum"
            $prList += "* $prUrl`n"
          }
          $body = "## 概要`n${{ steps.date.outputs.year_month }}リリース`n## チケットへのリンク`n* `nこのリリースに含まれる変更:`n`n$prList`n## 発行対象プロジェクト`n$projectList"
          gh pr create --base main --head release/${{ steps.date.outputs.date }} --title "$title" --body "$body"